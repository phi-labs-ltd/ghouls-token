{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Schema",
  "type": "object",
  "required": [
    "execute",
    "instantiate",
    "query"
  ],
  "properties": {
    "execute": {
      "$ref": "#/definitions/ExecuteMsg_for_Nullable_Metadata_and_Empty"
    },
    "instantiate": {
      "$ref": "#/definitions/InstantiateMsg"
    },
    "query": {
      "$ref": "#/definitions/QueryMsg_for_Empty"
    }
  },
  "definitions": {
    "AssetFile": {
      "type": "object",
      "properties": {
        "cdn": {
          "description": "Whether the file is served from a CDN.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolution": {
          "description": "Defines the file's resolution if applicable",
          "type": [
            "string",
            "null"
          ]
        },
        "size": {
          "description": "The files size if applicable",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "type": {
          "description": "The file's type",
          "type": [
            "string",
            "null"
          ]
        },
        "uri": {
          "description": "The file's URI",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Attribute": {
      "type": "object",
      "properties": {
        "trait_type": {
          "description": "The type of attribute",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "The value for that attribute",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "ExecuteMsg_for_Nullable_Metadata_and_Empty": {
      "description": "This is like Cw721ExecuteMsg but we add a Mint command for an owner to make this stand-alone. You will likely want to remove mint and use other control logic in any contract that inherits this.",
      "oneOf": [
        {
          "description": "Transfer is a base message to move a token to another account without triggering actions",
          "type": "object",
          "required": [
            "transfer_nft"
          ],
          "properties": {
            "transfer_nft": {
              "type": "object",
              "required": [
                "recipient",
                "token_id"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Send is a base message to transfer a token to a contract and trigger an action on the receiving contract.",
          "type": "object",
          "required": [
            "send_nft"
          ],
          "properties": {
            "send_nft": {
              "type": "object",
              "required": [
                "contract",
                "msg",
                "token_id"
              ],
              "properties": {
                "contract": {
                  "type": "string"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Allows operator to transfer / send the token from the owner's account. If expiration is set, then this allowance has a time/height limit",
          "type": "object",
          "required": [
            "approve"
          ],
          "properties": {
            "approve": {
              "type": "object",
              "required": [
                "spender",
                "token_id"
              ],
              "properties": {
                "expires": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Expiration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "spender": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove previously granted Approval",
          "type": "object",
          "required": [
            "revoke"
          ],
          "properties": {
            "revoke": {
              "type": "object",
              "required": [
                "spender",
                "token_id"
              ],
              "properties": {
                "spender": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Allows operator to transfer / send any token from the owner's account. If expiration is set, then this allowance has a time/height limit",
          "type": "object",
          "required": [
            "approve_all"
          ],
          "properties": {
            "approve_all": {
              "type": "object",
              "required": [
                "operator"
              ],
              "properties": {
                "expires": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Expiration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "operator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove previously granted ApproveAll permission",
          "type": "object",
          "required": [
            "revoke_all"
          ],
          "properties": {
            "revoke_all": {
              "type": "object",
              "required": [
                "operator"
              ],
              "properties": {
                "operator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Mint a new NFT, can only be called by the contract minter",
          "type": "object",
          "required": [
            "mint"
          ],
          "properties": {
            "mint": {
              "$ref": "#/definitions/MintMsg_for_Nullable_Metadata"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Burn an NFT the sender has access to",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Extension msg",
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update extension metadata",
          "type": "object",
          "required": [
            "update_metadata"
          ],
          "properties": {
            "update_metadata": {
              "$ref": "#/definitions/UpdateMetadataMsg_for_Nullable_Metadata"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "minter",
        "name",
        "symbol"
      ],
      "properties": {
        "minter": {
          "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
          "type": "string"
        },
        "name": {
          "description": "Name of the NFT contract",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the NFT contract",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "URI pointing to the asset's animation",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "Array of attributes defining the characteristics of the asset",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "description": {
          "description": "Description of the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "URI pointing to an external URL defining the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "URI pointing to the asset's logo",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Name of the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "properties": {
          "description": "Additional properties that define the asset",
          "anyOf": [
            {
              "$ref": "#/definitions/Properties"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "MintMsg_for_Nullable_Metadata": {
      "type": "object",
      "required": [
        "owner",
        "token_id"
      ],
      "properties": {
        "extension": {
          "description": "Any custom extension used by this contract",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "owner": {
          "description": "The owner of the newly minter NFT",
          "type": "string"
        },
        "token_id": {
          "description": "Unique ID of the NFT",
          "type": "string"
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Properties": {
      "type": "object",
      "properties": {
        "category": {
          "description": "A media category for the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "files": {
          "description": "Additional files to include with the asset",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AssetFile"
          }
        }
      }
    },
    "QueryMsg_for_Empty": {
      "oneOf": [
        {
          "description": "Return the owner of the given token, error if token does not exist Return type: OwnerOfResponse",
          "type": "object",
          "required": [
            "owner_of"
          ],
          "properties": {
            "owner_of": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "description": "unset or false will filter out expired approvals, you must set to true to see them",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Return operator that can access all of the owner's tokens. Return type: `ApprovalResponse`",
          "type": "object",
          "required": [
            "approval"
          ],
          "properties": {
            "approval": {
              "type": "object",
              "required": [
                "spender",
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "spender": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Return approvals that a token has Return type: `ApprovalsResponse`",
          "type": "object",
          "required": [
            "approvals"
          ],
          "properties": {
            "approvals": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "List all operators that can access all of the owner's tokens Return type: `OperatorsResponse`",
          "type": "object",
          "required": [
            "all_operators"
          ],
          "properties": {
            "all_operators": {
              "type": "object",
              "required": [
                "owner"
              ],
              "properties": {
                "include_expired": {
                  "description": "unset or false will filter out expired items, you must set to true to see them",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "owner": {
                  "type": "string"
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Total number of tokens issued",
          "type": "object",
          "required": [
            "num_tokens"
          ],
          "properties": {
            "num_tokens": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "With MetaData Extension. Returns top-level metadata about the contract: `ContractInfoResponse`",
          "type": "object",
          "required": [
            "contract_info"
          ],
          "properties": {
            "contract_info": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "With MetaData Extension. Returns metadata about one particular token, based on *ERC721 Metadata JSON Schema* but directly from the contract: `NftInfoResponse`",
          "type": "object",
          "required": [
            "nft_info"
          ],
          "properties": {
            "nft_info": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "With MetaData Extension. Returns the result of both `NftInfo` and `OwnerOf` as one query as an optimization for clients: `AllNftInfo`",
          "type": "object",
          "required": [
            "all_nft_info"
          ],
          "properties": {
            "all_nft_info": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "description": "unset or false will filter out expired approvals, you must set to true to see them",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "With Enumerable extension. Returns all tokens owned by the given address, [] if unset. Return type: TokensResponse.",
          "type": "object",
          "required": [
            "tokens"
          ],
          "properties": {
            "tokens": {
              "type": "object",
              "required": [
                "owner"
              ],
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "owner": {
                  "type": "string"
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "With Enumerable extension. Requires pagination. Lists all token_ids controlled by the contract. Return type: TokensResponse.",
          "type": "object",
          "required": [
            "all_tokens"
          ],
          "properties": {
            "all_tokens": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "minter"
          ],
          "properties": {
            "minter": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Extension query",
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateMetadataMsg_for_Nullable_Metadata": {
      "type": "object",
      "required": [
        "token_id"
      ],
      "properties": {
        "extension": {
          "description": "Any custom extension used by this contract",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_id": {
          "description": "Unique ID of the NFT",
          "type": "string"
        }
      }
    }
  }
}
