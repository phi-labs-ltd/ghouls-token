{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllNftInfoResponse",
  "type": "object",
  "required": [
    "access",
    "info"
  ],
  "properties": {
    "access": {
      "description": "Who can transfer the token",
      "allOf": [
        {
          "$ref": "#/definitions/OwnerOfResponse"
        }
      ]
    },
    "info": {
      "description": "Data on the token itself,",
      "allOf": [
        {
          "$ref": "#/definitions/NftInfoResponse_for_Nullable_Metadata"
        }
      ]
    }
  },
  "definitions": {
    "Approval": {
      "type": "object",
      "required": [
        "expires",
        "spender"
      ],
      "properties": {
        "expires": {
          "description": "When the Approval expires (maybe Expiration::never)",
          "allOf": [
            {
              "$ref": "#/definitions/Expiration"
            }
          ]
        },
        "spender": {
          "description": "Account that can transfer/send the token",
          "type": "string"
        }
      }
    },
    "AssetFile": {
      "type": "object",
      "properties": {
        "cdn": {
          "description": "Whether the file is served from a CDN.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolution": {
          "description": "Defines the file's resolution if applicable",
          "type": [
            "string",
            "null"
          ]
        },
        "size": {
          "description": "The files size if applicable",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "type": {
          "description": "The file's type",
          "type": [
            "string",
            "null"
          ]
        },
        "uri": {
          "description": "The file's URI",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Attribute": {
      "type": "object",
      "properties": {
        "trait_type": {
          "description": "The type of attribute",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "The value for that attribute",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "URI pointing to the asset's animation",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "Array of attributes defining the characteristics of the asset",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "description": {
          "description": "Description of the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "URI pointing to an external URL defining the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "URI pointing to the asset's logo",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Name of the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "properties": {
          "description": "Additional properties that define the asset",
          "anyOf": [
            {
              "$ref": "#/definitions/Properties"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "NftInfoResponse_for_Nullable_Metadata": {
      "type": "object",
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "OwnerOfResponse": {
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      }
    },
    "Properties": {
      "type": "object",
      "properties": {
        "category": {
          "description": "A media category for the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "files": {
          "description": "Additional files to include with the asset",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AssetFile"
          }
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
